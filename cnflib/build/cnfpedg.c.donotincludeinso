#include "geminc.h"
#include "gemprm.h"
#include "cnf.h"

void cnf_pedg ( int *iret )

/************************************************************************
 * cnf_pedg								*
 *                                                                      *
 * This function plots all the grid edge lines.				*
 *                                                                      *
 * void cnf_pedg ( iret )						*
 *                                                                      *
 * Input parameters:                                                    *
 *                                                                      *
 * Output parameters:                                             	*
 *  *iret	int	Return code					*
 *			= 0 - normal					*
 *                                                                      *
 **                                                                     *
 * Log:                                                                 *
 * D.W.Plummer/NCEP	 4/00						*
 ***********************************************************************/

{
int	ii, npts, col, ier;
int	isltyp, islstr, isldir, islwid;
float	slsiz, *x, *y;
CNF_EDGEPT	*ept;
/*---------------------------------------------------------------------*/

    *iret = 0;

    G_MALLOC ( x, float, LLMXPT, "EDGE x" );
    G_MALLOC ( y, float, LLMXPT, "EDGE y" );

/* printf("BEGIN EDGE DRAW\n"); */

isltyp = 22;
islstr = 0;
isldir = 0;
slsiz = 0.6;
islwid = 1;
/* gsspln( &isltyp, &islstr, &isldir, &slsiz, &islwid, &ier ); */
/* printf("isltyp=%d, islstr=%d, isldir=%d, slsiz=%f, islwid=%d\n", */
/* isltyp, islstr, isldir, slsiz, islwid ); */

col = 0;

    for ( ii = 0; ii < _edges.nedges; ii++ )  {

      if ( _edges.edge[ii]->first != NULL_CNF_EDGEPT )  {

	npts = 0;
	ept = _edges.edge[ii]->first;
	do {
	    x[npts] = ept->pt->x;
	    y[npts] = ept->pt->y;
/* printf("\t%5d - (%5.2f,%5.2f) \n", npts, x[npts], y[npts] ); */
	    npts += 1;
	    ept = ept->next;
	} while ( ept != _edges.edge[ii]->first &&
		  ept != NULL_CNF_EDGEPT );
	if ( _edges.edge[ii]->closed == CNF_CLOSED )  {
	    x[npts] = x[0];
	    y[npts] = y[0];
	    npts += 1;
	}

/* printf("npts = %d\n", npts ); */
col=32;
/* gscolr( &col, &ier ); */
	gline ( sys_G, &npts, x, y, &ier, strlen(sys_G) );
/* col = (col+1) % 30 + 2; */
/* gscolr( &col, &ier ); */
/* gspln ( sys_G, &npts, x, y, &ier, strlen(sys_G) ); */

      }

    }

    G_FREE ( y, float );
    G_FREE ( x, float );

/* printf("END EDGE DRAW\n"); */

}

/*=====================================================================*/
