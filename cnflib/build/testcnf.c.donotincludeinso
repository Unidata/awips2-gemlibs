#include "geminc.h"
#include "gemprm.h"
#include "cnf.h"

/*---------------------------------------------------------------------*/

#define	MAX_PTS	1000

/*---------------------------------------------------------------------*/

void	tcnf_gsgprj ();
void	tcnf_gsdeva ();

/*---------------------------------------------------------------------*/

void cnf_comp ( int *imz_in, int *jmz_in, float *grid, int *ioffx, int *ioffy, int *iskip, int *iret );

/*---------------------------------------------------------------------*/

int	main ( void )

/************************************************************************
 * TESTCNF								*
 *									*
 * This program tests the contour line and contour fill library		*
 *									*
 **									*
 * Log:									*
 * D.W.Plummer/NCEP	 0/00	Create					*
 ***********************************************************************/
{
int	ii, jj, mode=1, istat, cont, numsub, bufsiz, iret, ier;
int	nclvl, nflvl, icolr, lintyp, linwid, linlbl, filtyp;
int	icolrs[LLCLEV], lintyps[LLCLEV], linwids[LLCLEV], linlbls[LLCLEV];
float	clvl[LLCLEV], flvl[LLCLEV];
int	ifcolr[LLCLEV], iftype[LLCLEV];
int	dumptype;
int	type, npts;
float	x[MAX_PTS], y[MAX_PTS];
char	select[32], fname[80], buffer[80];
FILE    *fp;
float	thresh, value;
int	which, nvals, index, color;
float	*grid = (float *)NULL;
int	ni=0, nj=0, np, ioffx, ioffy, iskip;
char	*cptr, result[9];
char	errstr[80];

/*---------------------------------------------------------------------*/

    cont = G_TRUE;

    ginitp ( &mode, &istat, &ier );

    cnf_init ( &iret );
    printf ( "\nCNF_INIT: iret = %d\n\n", iret );

    while ( cont == G_TRUE ) {
	printf ( "\n\n" );
	printf ( "   1 = CNF_INIT  2 = CNF_DONE  3 = CNF_DUMP\n" );
	printf ( "   4 = CNF_LNSV  5 = CNF_VALS  6 = CNF_PREP\n" );
	printf ( "   7 = CNF_GVAL  8 = CNF_NVAL  9 = CNF_GCOL\n" );
	printf ( "  10 = CNF_FILL 11 = CNF_COMP \n" );
	printf ( "  30 = prep_AdjEdges  \n" );
	printf ( "  31 = prep_LinkEdges  \n" );
	printf ( "  32 = prep_ExamineEdgePts  \n" );
	printf ( "  33 = prep_LinkCntrs  \n" );
	printf ( "  34 = prep_ConnectCntrs  \n" );
	printf ( "  50 = Read in lines from a file \n" );
	printf ( "  80 = Read in array from a file \n" );
	printf ( "  90 = Set grid proj/nav information (GSGPRJ)\n" );
	printf ( "  91 = Set  map proj/nav information (GSMPRJ)\n" );
	printf ( "  92 = Set device (GSDEVA)\n" );
	printf ( "\n" );
	printf ( "Select a subroutine number or type EXIT: " );
	scanf ( " %s", select );
	switch ( select[0] ) {
		case 'e':
		case 'E':
			cont = G_FALSE;
		default:
			numsub = atoi ( select );
			break;
	}

/*---------------------------------------------------------------------*/
	if ( numsub == 1 ) {

	    cnf_init ( &iret );

	    printf ( "\nCNF_INIT: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 2 ) {

	    cnf_done ( &iret );

	    printf ( "\nCNF_DONE: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 3 ) {

            printf ( "Enter type of dump (integer:0=edges(short dump),1=contours(short dump),2=edges(long dump),3=contours(long dump),4=contour interval information :\n" );
            scanf ( " %d", &dumptype );

	    cnf_dump ( &dumptype, &iret );

	    printf ( "\nCNF_DUMP: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 4 ) {

            printf ( "Enter type (1=CNTR, 2=EDGE):\n" );
            scanf ( " %d", &type );

            printf ( "Enter number of points:\n" );
            scanf ( " %d", &npts );

            printf ( "Enter %d pairs of points:\n", npts );
	    for ( ii = 0; ii < npts; ii++ )  {
		scanf ( " %f %f", &(x[ii]), &(y[ii]) );
	    }

            printf ( "Enter contour value:\n" );
            scanf ( " %f", &value );

	    cnf_lnsv ( &type, &npts, x, y, &value, &iret );

	    printf ( "\nCNF_LNSV: iret = %d\n\n", iret );

	    if ( iret != 0 )  {
		cst_inch ( npts, errstr, &ier );
		er_wmsg ( "CNF", &iret, errstr, &ier,
		       strlen("CNF"), strlen(errstr) );
	    }

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 5 ) {

            printf ( "Enter number of contour line levels: ");
            scanf ( " %d", &nclvl );

            printf ( "Enter all contour levels:\n" );
	    for ( ii = 0; ii < nclvl; ii++ )  scanf ( " %f", &(clvl[ii]) );

            printf ( "Enter contour color:\n" );
            scanf ( " %d", &icolr );
	    for ( ii = 0; ii < nclvl; ii++ ) icolrs[ii] = icolr;

            printf ( "Enter contour line type:\n" );
            scanf ( " %d", &lintyp );
	    for ( ii = 0; ii < nclvl; ii++ ) lintyps[ii] = lintyp;

            printf ( "Enter contour line width:\n" );
            scanf ( " %d", &linwid );
	    for ( ii = 0; ii < nclvl; ii++ ) linwids[ii] = linwid;

            printf ( "Enter contour line label flag:\n" );
            scanf ( " %d", &linlbl );
	    for ( ii = 0; ii < nclvl; ii++ ) linlbls[ii] = linlbl;

            printf ( "Enter number of contour fill levels: ");
            scanf ( " %d", &nflvl );

            printf ( "Enter all contour fill levels:\n" );
	    for ( ii = 0; ii < nflvl; ii++ ) scanf ( " %f", &(flvl[ii]) );

            printf ( "Enter all contour fill colors:\n" );
	    for ( ii = 0; ii <= nflvl; ii++ ) scanf ( " %d", &(ifcolr[ii]) );

            printf ( "Enter contour fill type:\n" );
            scanf ( " %d", &filtyp );
	    for ( ii = 0; ii <= nclvl; ii++ ) iftype[ii] = filtyp;

	    cnf_vals ( &nclvl, clvl, icolrs, lintyps, linwids, linlbls, 
			   &nflvl, flvl, ifcolr, iftype, &iret );

	    printf ( "\nCNF_VALS: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 6 ) {

	    cnf_prep ( &iret );

	    printf ( "\nCNF_PREP: iret = %d\n\n", iret );

	    if ( iret != 0 )  {
		errstr[0] = '\0';
		er_wmsg ( "CNF", &iret, errstr, &ier,
		       strlen("CNF"), strlen(errstr) );
	    }

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 7 ) {

            printf ( "Enter index : ");
            scanf ( " %d", &index );

	    cnf_gval ( &index, &value, &ier );

	    printf ( "\nCNF_GVAL: iret = %d\n\n", ier );
	    printf ( "\tvalue = %f\n", value );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 8 ) {

	    cnf_nval ( &nvals, &ier );

	    printf ( "\nCNF_NVAL: iret = %d\n\n", ier );
	    printf ( "\tnvals = %d\n", nvals );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 9 ) {

            printf ( "Enter threshold value : ");
            scanf ( " %f", &thresh );

            printf ( "Enter either 1 (for above) or -1 (below) threshold: ");
            scanf ( " %d", &which );

	    cnf_gcol ( thresh, which, &color, &type, &ier );

	    printf ( "\nCNF_GCOL: iret = %d\n\n", ier );
	    printf ( "\tfill color = %d, fill type = %d\n", color, type );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 10 ) {

	    /*cnf_fill ( &ier );*/

	    printf ( "\nCNF_FILL: iret = %d\n\n", ier );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 11 ) {

	    if ( ni == 0 || nj == 0 )  {
		printf ( "Must input an array to contour.\n" );
	    }
	    else  {

	        ioffx = 0;
	        ioffy = 0;
	        iskip = 0;

	        printf ( "\nCNF_COMP... \n\n" );
	        cnf_comp ( &ni, &nj, grid, &ioffx, &ioffy, &iskip, &ier );

	        printf ( "\nCNF_COMP: iret = %d\n\n", ier );

	    }

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 30 ) {

	    printf ( "Enter which edges to adjust (%d=CNF_OPEN,%d=CNF_CLOSED) : ",CNF_OPEN,CNF_CLOSED);
	    scanf ( " %d", &type );

	    iret = prep_AdjEdges ( type );

	    printf ( "\nprep_AdjEdges: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 31 ) {

	    iret = prep_LinkEdges ( );

	    printf ( "\nprep_LinkEdges: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 32 ) {

	    iret = prep_ExamineEdgePts ( );

	    printf ( "\nprep_ExamineEdgePts: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 33 ) {

	    iret = prep_LinkCntrs ( );

	    printf ( "\nprep_LinkCntrs: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 34 ) {

	    iret = prep_ConnectCntrs ( );

	    printf ( "\nprep_ConnectCntrs: iret = %d\n\n", iret );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 50 ) {

            printf ( "Enter file name:\n" );
            scanf ( " %s", fname );

	    fp = (FILE *)cfl_tbop( fname, "", &ier );

	    bufsiz = sizeof(buffer);
	    cfl_trln( fp, bufsiz, buffer, &ier );
	    while ( ier == 0 )  {

		sscanf( buffer, "%d %d %f", &type, &npts, &value );
printf("type, npts, value = %d, %d, %f\n", type, npts, value );

		for ( ii = 0; ii < npts; ii++ )  {
			cfl_trln( fp, bufsiz, buffer, &ier );
			sscanf( buffer, "%f %f", &(x[ii]), &(y[ii]) );
/* printf("\t%f %f\n", x[ii], y[ii] ); */
		}

		cnf_lnsv ( &type, &npts, x, y, &value, &iret );

		cfl_trln( fp, bufsiz, buffer, &ier );

	    }

	    cfl_clos ( fp, &ier );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 80 ) {

            printf ( "Enter file name:\n" );
            scanf ( " %s", fname );

	    fp = (FILE *)cfl_tbop( fname, "", &ier );

	    bufsiz = sizeof(buffer);
	    cfl_trln( fp, bufsiz, buffer, &ier );
	    sscanf( buffer, "%d %d", &ni, &nj );
	    printf("Grid array dimensions: %d x %d\n", ni, nj );
	    G_FREE ( grid, float );
	    G_MALLOC ( grid, float, ni*nj, "Error allocating grid" );

	    np = 0;
	    for ( jj = 0; jj < nj; jj++ )  {
		/*orig cfl_trln( fp, bufsiz, buffer, &ier ); */
		/*orig cptr = buffer; */
		for ( ii = 0; ii < ni; ii++ )  {
		    /*orig cptr = cst_split ( cptr, ' ', 8, result, &ier ); */
		cfl_trln( fp, bufsiz, buffer, &ier ); 
		    sscanf ( buffer, "%f", &(grid[np]) );
		    printf("  %6.2f", grid[np] );
		    np += 1;
		}
		printf("\n");
	    }

	    cfl_clos ( fp, &ier );

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 90 ) {

/* 	    tcnf_gsgprj (); */

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 91 ) {

/* 	    tcnf_gsmprj; */

	}
/*---------------------------------------------------------------------*/
	if ( numsub == 92 ) {

/* 	    tcnf_gsdeva (); */


	}
/*---------------------------------------------------------------------*/
    }

    cnf_done ( &iret );
    printf ( "\nCNF_DONE: iret = %d\n\n", iret );

    G_FREE ( grid, float );

    exit ( 0 );

}

/*=====================================================================*/

void	tcnf_gsgprj ()
{
int	kx, ky, process, ier;
char	cpyfil[128], filnam[128];
char	proj[32];
float	ang1, ang2, ang3;
float	xll, yll, xur, yur;

int	one=128, nf;
char	tmpl[128];
/* int	wrtflg=G_FALSE; */
/* char	name[4]; */
/* char	kxky[32], gdarea[64], cprj[32]; */
/* char	anlyss[32]; */
/* float	rnvblk[LLNNAV], rltln[4], anlblk[LLNANL]; */
/* int	igdfln, navsz, ianlsz, ihdrsz, maxgrd; */

/*---------------------------------------------------------------------*/

    printf ( "Enter value for CPYFIL ala GDCFIL program ('none' to define from user input):\n" );
    scanf ( " %s", cpyfil );

    if ( strcmp(cpyfil,"none") == 0 )  {
	filnam[0] = CHNULL;
    }
    else  {
	fl_mfls ( cpyfil, " ", "*", &one, filnam, &nf, tmpl, &ier,
	        strlen(cpyfil), strlen(" "), strlen("*"), 
		strlen(filnam), strlen(tmpl) );
printf("from fl_mfls - filnam=<%s>\n", filnam );
	if ( ier != 0 )  er_wmsg ( "FL", &ier, " ", &ier,
		strlen("FL"), strlen(" ") );
    }

    process = G_TRUE;
    if ( cpyfil[0] == '#' )  {
	/* Build nav block from grid navigation table input 
	strcpy ( filnam, cpyfil );
	printf("BUILDING NAVIGATION from GRID NAVIGATION TABLE...\n");
	gdctbl ( filnam, name, cprj, &kx, &ky, rltln, rnvblk, anlblk, &ier,
		strlen(filnam), strlen(name), strlen(cprj) );
	if ( ier != 0 )
	    process = G_FALSE;
	else
	    gdcanl ( anlyss, rnvblk, anlblk, &ier, strlen(anlyss) );
	    */
    }
    else if ( strlen(filnam) == 0 )  {
	/* Build nav block from user input */
	printf("BUILDING NAVIGATION from USER INPUT...\n");
        printf ( "Enter projection and three angles (e.g., 'str 90 -105 0'):\n" );
        scanf ( " %s %f %f %f", proj, &ang1, &ang2, &ang3 );
        printf ( "Enter grid dimensions (e.g., '147 110'):\n" );
        scanf ( " %d %d", &kx, &ky );
        printf ( "Enter grid cornerpoints (e.g., '-0.27 -139.48 32.75 -14.60'):\n" );
        scanf ( " %f %f %f %f", &xll, &yll, &xur, &yur );

	gsgprj ( proj, &ang1, &ang2, &ang3, &kx, &ky, 
		&xll, &yll, &xur, &yur, &ier, strlen(proj) );

	gsmprj ( proj, &ang1, &ang2, &ang3, 
		&xll, &yll, &xur, &yur, &ier, strlen(proj) );

    }
    else  {
	/* Get nav block from existing file/
	printf("GETTING NAVIGATION from EXISTING GRID FILE...\n");
	gd_opnf ( filnam, &wrtflg, &igdfln, &navsz, rnvblk, &ianlsz, 
		anlblk, &ihdrsz, &maxgrd, &ier, strlen(filnam) );
	if ( ier != 0 )
	    process = G_FALSE;
	else  {
	    gd_clos ( &igdfln, &ier );
	    gr_rnav ( rnvblk, cprj, &kx, &ky, &ier, strlen(cprj) );
	    rltln[0] = rnvblk [6]; rltln[1] = rnvblk [7];
	    rltln[2] = rnvblk [8]; rltln[3] = rnvblk [9];
	    gdcanl ( anlyss, rnvblk, anlblk, &ier, strlen(anlyss) );
	}
	*/
    }

    printf("Grid coordinate information as follows:\n\tproj=%s/%.2f;%.2f;%.2f\n\tkxky=%d;%d\n\tgarea=%.2f;%.2f;%.2f;%.2f\n",
	    proj, ang1, ang2, ang3, kx, ky, xll, yll, xur, yur );

    return;

}

/*=====================================================================*/

void	tcnf_gsdeva ()
{
int	iunit=1, itype=1, ier;
char	device[16]={"xw"}, dfilnam[32]={"TESTCNF"};
float	xsize=735.0F, ysize=550.0F;

/*---------------------------------------------------------------------*/

    gsdeva (device, &iunit, dfilnam, &itype, &xsize, &ysize, &ier, 
	    strlen(device), strlen(dfilnam));

    return;

}
